name: model-pack

permissions:
  contents: write
  actions: read
  id-token: write

defaults:
  run:
    shell: bash

on:
  workflow_dispatch:
    inputs:
      model_repository:
        description: "Model Repository"
        required: true
        type: string
        default: ""
      model_name:
        description: "Model Name"
        required: true
        type: string
        default: ""
      model_override_tags:
        description: "Model Override Tags"
        required: false
        type: string
        default: ""

jobs:
  generate-matrix:
    runs-on: ubuntu-22.04
    outputs:
      matrix: ${{ steps.set-matrix.outputs.matrix }}
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          fetch-depth: 1
          persist-credentials: false
      - name: Set Matrix
        id: set-matrix
        run: |
          #!/usr/bin/env bash
          
          declare -A OVERRIDE_MODELS_MAP=()
          
          if [[ -n "${{ github.event.inputs.model_override_tags }}" ]]; then
            OVERRIDE_TAGS="$(echo "${{ github.event.inputs.model_override_tags }}" | tr ',' '\n' | jq -R . | jq -s -c .)"
            OVERRIDE_MODELS=$(echo "${OVERRIDE_TAGS}" | jq -r '.[] | "docker.io/${{ github.event.inputs.model_repository }}/${{ github.event.inputs.model_name }}:\(.)"')
            for MODEL in $OVERRIDE_MODELS; do
              OVERRIDE_MODELS_MAP[$MODEL]=$MODEL
            done
          fi
          
          CANDIDATES="$(yq 'map(.[] | select(.name == "${{ github.event.inputs.model_name }}"))' --output-format json --indent 0 ${{ github.workspace }}/models/pack/matrix.yaml)"
          MODELS=$(echo "${CANDIDATES}" | jq -r '.[] | "docker.io/${{ github.event.inputs.model_repository }}/${{ github.event.inputs.model_name }}:\(.tag)"')
          EXISTING_MODELS=()
          for MODEL in $MODELS; do
            if [[ -v OVERRIDE_MODELS_MAP[$MODEL] ]]; then
              continue;
            fi
            if oras manifest fetch $MODEL &> /dev/null; then
              EXISTING_MODELS+=($MODEL)
            fi
          done
          
          if [[ ${#EXISTING_MODELS[@]} -eq 0 ]]; then
            MATRIX="${CANDIDATES}"
          else
            MATRIX=$(echo "${CANDIDATES}" | jq -c --argjson existing "$(printf '%s\n' "${EXISTING_MODELS[@]}" | jq -R . | jq -s -c .)" 'map(select("${{ github.event.inputs.model_name }}:\(.tag)" as $img | $existing | index("docker.io/${{ github.event.inputs.model_repository }}/" + $img) | not))')
          fi
          
          echo "matrix=${MATRIX}" >> "$GITHUB_OUTPUT"

  pack:
    needs:
      - generate-matrix
    runs-on: ubuntu-22.04
    strategy:
      fail-fast: false
      matrix:
        include: ${{ fromJson(needs.generate-matrix.outputs.matrix) }}
    steps:
      - name: Maximize Docker Build Space
        uses: gpustack/gguf-packer-go/.github/actions/maximize-docker-build-space@main
        with:
          root-reserve-mb: 1024
          temp-reserve-mb: 1024
          swap-size-mb: 1024
          deep-clean: true
      - name: Checkout
        uses: actions/checkout@v4
        with:
          fetch-depth: 1
          persist-credentials: false
      - name: Setup Buildx
        uses: docker/setup-buildx-action@v3
      - name: Login DockerHub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.CI_DOCKERHUB_USERNAME }}
          password: ${{ secrets.CI_DOCKERHUB_PASSWORD }}
      - name: Prepare
        id: prepare
        run: |
          #!/usr/bin/env bash
          
          echo "Get outputs"
          MODEL_VENDOR="$(echo "${{ matrix.repository }}" | cut -d'/' -f1)"
          echo "model_vendor=${MODEL_VENDOR}" >> "$GITHUB_OUTPUT"
      - name: Package
        uses: docker/build-push-action@v6
        with:
          push: true
          context: "${{ github.workspace }}/models/pack"
          file: "${{ github.workspace }}/models/pack/Dockerfile.${{ matrix.usage }}"
          no-cache: true
          build-args: |
            MODEL_VENDOR=${{ steps.prepare.outputs.model_vendor }}
            MODEL_REPOSITORY=${{ matrix.repository }}
            MODEL_FILE=${{ matrix.file }}
            ${{ matrix.project_file != ''  && format('MODEL_PROJECTOR_FILE={0}', matrix.project_file ) || ''}}
            ${{ matrix.quantize_type != '' && format('MODEL_QUANTIZE_TYPE={0}',  matrix.quantize_type) || ''}}
            ${{ matrix.context_size != '' && format('MODEL_CONTEXT_SIZE={0}', matrix.context_size) || '' }}
          tags: |
            "${{ github.event.inputs.model_repository }}/${{ matrix.name }}:${{ matrix.tag }}"
      - name: Review Space Usage
        run: |
          #!/usr/bin/env bash

          df -h
